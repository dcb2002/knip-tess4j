Index: api/tesseractmain.cpp
===================================================================
--- api/tesseractmain.cpp	(revision 861)
+++ api/tesseractmain.cpp	(working copy)
@@ -55,6 +55,7 @@
   const char* lang = "eng";
   const char* image = NULL;
   const char* output = NULL;
+  const char* datapath = NULL;
   bool noocr = false;
   bool list_langs = false;
   bool print_parameters = false;
@@ -68,6 +69,12 @@
     } else if (strcmp(argv[arg], "-psm") == 0 && arg + 1 < argc) {
       pagesegmode = static_cast<tesseract::PageSegMode>(atoi(argv[arg + 1]));
       ++arg;
+    } else if (strcmp(argv[arg], "--tessdata-dir") == 0 && arg + 1 < argc) {
+      datapath = argv[arg + 1];
+      ++arg;
+    } else if (strcmp(argv[arg], "--list-langs") == 0) {
+      noocr = true;
+      list_langs = true;
     } else if (strcmp(argv[arg], "--print-parameters") == 0) {
       noocr = true;
       print_parameters = true;
@@ -82,46 +89,43 @@
     ++arg;
   }
 
-  if (argc == 2 && strcmp(argv[1], "--list-langs") == 0) {
-    list_langs = true;
-    noocr = true;
-  }
-
   if (output == NULL && noocr == false) {
-    fprintf(stderr, "Usage:%s imagename outputbase|stdout [-l lang] "
-                      "[-psm pagesegmode] [-c configvar=value] "
+    fprintf(stderr, "Usage:%s imagename outputbase|stdout [options...] "
                       "[configfile...]\n\n", argv[0]);
+
+    fprintf(stderr, "OCR options:\n");
+    fprintf(stderr, "  --tessdata-dir /path\tspecify location of tessdata"
+                      " path\n");
+    fprintf(stderr, "  -l lang[+lang]\tspecify language(s) used for OCR\n");
+    fprintf(stderr, "  -c configvar=value\tset value for control parameter.\n"
+                      "\t\t\tMultiple -c arguments are allowed.\n");
+    fprintf(stderr, "  -psm pagesegmode\tspecify page segmentation mode.\n");
+    fprintf(stderr, "These options must occur before any configfile.\n\n");
     fprintf(stderr,
               "pagesegmode values are:\n"
-              "0 = Orientation and script detection (OSD) only.\n"
-              "1 = Automatic page segmentation with OSD.\n"
-              "2 = Automatic page segmentation, but no OSD, or OCR\n"
-              "3 = Fully automatic page segmentation, but no OSD. (Default)\n"
-              "4 = Assume a single column of text of variable sizes.\n"
-              "5 = Assume a single uniform block of vertically aligned text.\n"
-              "6 = Assume a single uniform block of text.\n"
-              "7 = Treat the image as a single text line.\n"
-              "8 = Treat the image as a single word.\n"
-              "9 = Treat the image as a single word in a circle.\n"
-              "10 = Treat the image as a single character.\n");
-    fprintf(stderr, "multiple -c arguments are allowed.\n");
-    fprintf(stderr, "-l lang, -psm pagesegmode and any -c options must occur"
-                      "before any configfile.\n\n");
+              "  0 = Orientation and script detection (OSD) only.\n"
+              "  1 = Automatic page segmentation with OSD.\n"
+              "  2 = Automatic page segmentation, but no OSD, or OCR\n"
+              "  3 = Fully automatic page segmentation, but no OSD. (Default)\n"
+              "  4 = Assume a single column of text of variable sizes.\n"
+              "  5 = Assume a single uniform block of vertically aligned text.\n"
+              "  6= Assume a single uniform block of text.\n"
+              "  7 = Treat the image as a single text line.\n"
+              "  8 = Treat the image as a single word.\n"
+              "  9 = Treat the image as a single word in a circle.\n"
+              "  10 = Treat the image as a single character.\n\n");
     fprintf(stderr, "Single options:\n");
     fprintf(stderr, "  -v --version: version info\n");
     fprintf(stderr, "  --list-langs: list available languages for tesseract "
-                      "engine\n");
+                      "engine. Can be used with --tessdata-dir.\n");
     fprintf(stderr, "  --print-parameters: print tesseract parameters to the "
-                      "stdout\n");
+                      "stdout.\n");
     exit(1);
   }
 
   tesseract::TessBaseAPI api;
-
-  STRING tessdata_dir;
-  truncate_path(argv[0], &tessdata_dir);
   api.SetOutputName(output);
-  int rc = api.Init(tessdata_dir.string(), lang, tesseract::OEM_DEFAULT,
+  int rc = api.Init(datapath, lang, tesseract::OEM_DEFAULT,
                 &(argv[arg]), argc - arg, NULL, NULL, false);
 
   if (rc) {
@@ -211,7 +215,7 @@
     fprintf(stderr, "Error during processing.\n");
     if (fout != stdout)
       fclose(fout);
-  exit(1);
+    exit(1);
   }
 
   fwrite(text_out.string(), 1, text_out.length(), fout);
Index: ccutil/mainblk.cpp
===================================================================
--- ccutil/mainblk.cpp	(revision 861)
+++ ccutil/mainblk.cpp	(working copy)
@@ -27,7 +27,7 @@
 #include          <stdlib.h>
 #include          "ccutil.h"
 
-#define VARDIR        "configs/" /*variables files */
+#define VARDIR        "configs/" /**< variables files */
 #define EXTERN
 
 const ERRCODE NO_PATH =
@@ -41,39 +41,44 @@
  * Main for mithras demo program. Read the arguments and set up globals.
  **********************************************************************/
 
-void CCUtil::main_setup(                 /*main demo program */
-                const char *argv0,       //program name
-                const char *basename     //name of image
-               ) {
-  imagebasename = basename;      /*name of image */
+/**
+ * @brief CCUtil::main_setup - set location of tessdata and name of image
+ *
+ * @param argv0 - paths to the directory with language files and config files.
+ * An actual value of argv0 is used if not NULL, otherwise TESSDATA_PREFIX is
+ * used if not NULL, next try to use compiled in -DTESSDATA_PREFIX. If previous
+ * is not sucessul - use current directory.
+ * @param basename - name of image
+ */
+void CCUtil::main_setup(const char *argv0, const char *basename) {
+  imagebasename = basename;      /**< name of image */
 
-  // TESSDATA_PREFIX Environment variable overrules everything.
-  // Compiled in -DTESSDATA_PREFIX is next.
-  // An actual value of argv0 is used if not NULL, otherwise current directory.
-  if (!getenv("TESSDATA_PREFIX")) {
+  if (argv0 != NULL) {
+    datadir = argv0;
+  } else {
+    if (getenv("TESSDATA_PREFIX")) {
+      datadir = getenv("TESSDATA_PREFIX");
+    } else {
 #ifdef TESSDATA_PREFIX
 #define _STR(a) #a
 #define _XSTR(a) _STR(a)
     datadir = _XSTR(TESSDATA_PREFIX);
 #undef _XSTR
 #undef _STR
-#else
-    if (argv0 != NULL) {
-      datadir = argv0;
-      // Remove tessdata from the end if present, as we will add it back!
-      int length = datadir.length();
-      if (length >= 8 && strcmp(&datadir[length - 8], "tessdata") == 0)
-        datadir.truncate_at(length - 8);
-      else if (length >= 9 && strcmp(&datadir[length - 9], "tessdata/") == 0)
-        datadir.truncate_at(length - 9);
-      if (datadir.length() == 0)
-        datadir = "./";
-    } else {
-      datadir = "./";
+#endif
     }
-#endif
+  }
+
+  // datadir may still be empty:
+  if (datadir.length() == 0) {
+    datadir = "./";
   } else {
-    datadir = getenv("TESSDATA_PREFIX");
+    // Remove tessdata from the end if present, as we will add it back!
+    int length = datadir.length();
+    if (length >= 8 && strcmp(&datadir[length - 8], "tessdata") == 0)
+      datadir.truncate_at(length - 8);
+    else if (length >= 9 && strcmp(&datadir[length - 9], "tessdata/") == 0)
+      datadir.truncate_at(length - 9);
   }
 
   // check for missing directory separator
@@ -82,6 +87,6 @@
   if ((strcmp(lastchar, "/") != 0) && (strcmp(lastchar, "\\") != 0))
     datadir += "/";
 
-  datadir += m_data_sub_dir;     /*data directory */
+  datadir += m_data_sub_dir;     /**< data directory */
 }
 }  // namespace tesseract
